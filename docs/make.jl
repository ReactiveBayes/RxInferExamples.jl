using Documenter, Weave, Dates

const AUTOGEN_DIR = joinpath(@__DIR__, "src", "autogenerated")

struct Category
    title::String
    path::String
    description::String
end

# Define category order (categories not in this list will be sorted alphabetically at the end)
const ORDERED_CATEGORIES = [
    Category(
        "Basic Examples",
        "basic_examples",
        """
Fundamental concepts and introductory tutorials. Start here if you're new to RxInfer.jl.
These examples cover basic probabilistic models, inference techniques, and data processing.
"""
    ),
    Category(
        "Advanced Examples",
        "advanced_examples",
        """
More complex applications and advanced inference techniques. These examples demonstrate
sophisticated models, performance optimization, and integration with other Julia packages.
"""
    ),
    Category(
        "Problem Specific",
        "problem_specific",
        """
Real-world applications and domain-specific models. These examples show how RxInfer.jl
can be applied to specific problems like time series analysis and signal processing.
"""
    )
]

const ALL_EXAMPLES_CONTRIBUTING_NOTE = """
!!! note "Contributing"
    This gallery is community-driven and automatically generated from our repository.
    We welcome your contributions!
    
    - [Report a bug](https://github.com/ReactiveBayes/RxInferExamples.jl/issues/new)
    - [Submit a pull request](https://github.com/ReactiveBayes/RxInferExamples.jl/pulls)
    - [Read contribution guide](../how_to_contribute.md)
    - [RxInfer.jl respository](https://github.com/ReactiveBayes/RxInfer.jl)
"""

# Helper function to sort categories according to OREDERED_CATEGORIES
function sort_by_ORDERED_CATEGORIES(items)
    # Create a lookup for category order
    order_lookup = Dict(category.path => i for (i, category) in enumerate(ORDERED_CATEGORIES))

    # Sort function that uses the lookup
    sort(items, by=item -> begin
        category = item[1]  # Get category name from pair
        # Use high number for categories not in the order list
        get(order_lookup, category, length(ORDERED_CATEGORIES) + 1)
    end)
end

# Function to collect metadata from all examples
function collect_examples_metadata()
    examples_dir = joinpath(@__DIR__, "src", "categories")
    !isdir(examples_dir) && return []

    metadata = []

    # Walk through all directories
    for (root, _, files) in walkdir(examples_dir)
        # Check if there's a meta.jl file
        meta_path = joinpath(root, "meta.jl")
        md_files = filter(f -> endswith(f, ".md"), files)

        for md_file in md_files
            example_path = relpath(joinpath(root, md_file), joinpath(@__DIR__, "src"))
            meta = if isfile(meta_path)
                include(meta_path)
            else
                continue
            end

            push!(metadata, (
                path=example_path,
                title=meta.title,
                description=meta.description,
                tags=meta.tags
            ))
        end
    end

    return metadata
end

# HTML generation helpers
function style_tag(tag)
    """
    <span style="display: inline-block; padding: 3px 7px; margin: 2px; 
        border-radius: 3px; font-size: 0.9em;
        background: var(--tag-bg-color, #f3f6f9);
        color: var(--tag-text-color, #476582);">
        $(tag)
    </span>
    """
end

function style_category_header(category)
    """
    ```@raw html
    <h2 style="margin-top: 2em; margin-bottom: 1em; color: var(--category-text-color, #2c3e50);">
        $(titlecase(replace(category, "_" => " ")))
    </h2>
    ```
    """
end

function style_example_card(meta)
    tags_html = join(map(style_tag, meta.tags), " ")

    """
    ```@raw html
    <div style="margin: 1.5em 0; padding: 1em 1.2em; border-radius: 8px; 
        border: 1px solid var(--card-border-color, #e9ecef);
        background: var(--card-bg-color, transparent);">
        <h3 style="margin: 0 0 0.6em 0;">
    ```
    [$(meta.title)]($(joinpath("..", meta.path)))
    ```@raw html
        </h3>
        <p style="margin: 0 0 1em 0; line-height: 1.6; color: var(--text-color, inherit);">
            $(meta.description)
        </p>
        $(tags_html)
    </div>
    ```
    """
end

# Add CSS variables for theme support
const THEME_STYLES = """
```@raw html
<style>
    :root {
        --tag-bg-color: #f3f6f9;
        --tag-text-color: #476582;
        --category-text-color: #2c3e50;
        --card-border-color: #e9ecef;
        --card-bg-color: transparent;
        --text-color: inherit;
        --resources-bg-color: #f8f9fa;
        --text-muted-color: #666;
        --description-text-color: #476582;
    }
    
    .theme--documenter-dark {
        --tag-bg-color: #2d2d2d;
        --tag-text-color: #9ecbff;
        --category-text-color: #e6e6e6;
        --card-border-color: #404040;
        --card-bg-color: #1f1f1f;
        --text-color: #e6e6e6;
        --resources-bg-color: #1f1f1f;
        --text-muted-color: #999;
        --description-text-color: #9ecbff;
    }
</style>
```
"""

# Default tags for all examples
const DEFAULT_META_TAGS = [
    "rxinfer",
    "julia",
    "bayesian inference",
    "examples",
    "probabilistic programming",
    "message passing",
    "probabilistic numerics",
    "variational inference",
    "belief propagation",
]

# Directories to ignore when processing HTML files
const IGNORED_DIRECTORIES = [
    "_cache",
    "_assets",
    "_internal",
    ".ipynb_checkpoints"
]

# Function to generate the list of examples page
function generate_examples_list()
    # Ensure autogenerated directory exists
    mkpath(AUTOGEN_DIR)

    metadata = collect_examples_metadata()

    # Group examples by their folder path
    categories = Dict()
    for meta in metadata
        folder = splitpath(meta.path)[2]
        push!(get!(categories, folder, []), meta)
    end

    # Generate markdown content
    output_path = joinpath(AUTOGEN_DIR, "list_of_examples.md")
    open(output_path, "w") do io
        # Add theme styles at the top
        write(io, THEME_STYLES)

        write(
            io,
            """
  # List of Examples

  Welcome to our curated collection of RxInfer.jl examples! Here you'll find a comprehensive set of tutorials, demonstrations, and real-world applications that showcase the power and flexibility of RxInfer.jl.

  Each example comes with:
  - A detailed description of concepts covered
  - Relevant tags for easy filtering
  - Complete source code and explanations
  - Visualizations and results analysis

  $ALL_EXAMPLES_CONTRIBUTING_NOTE

  ## External Resources

  ```@raw html
  <div style="margin: 1.5em 0; padding: 1.2em; border-radius: 8px; 
      background-color: var(--resources-bg-color, #f8f9fa); 
      border: 1px solid var(--card-border-color, #e9ecef);">
      <h4 style="margin: 0 0 1em 0; color: var(--category-text-color, #333);">Community Tutorials & Guides</h4>
      <ul style="margin: 0; padding-left: 1.2em;">
          <li style="margin-bottom: 0.8em;">
              <strong>Active Inference with RxInfer.jl</strong><br/>
              <span style="color: var(--text-muted-color, #666);">An in-depth exploration of Active Inference principles guided by 
              <a href="https://www.linkedin.com/in/kobusesterhuysen/">Kobus Esterhuysen</a> at 
              <a href="https://learnableloop.com/#category=RxInfer">Learnable Loop</a>.</span>
          </li>
          <li style="margin-bottom: 0.8em;">
              <strong>Video Tutorial Series</strong><br/>
              <span style="color: var(--text-muted-color, #666);">Comprehensive video tutorials covering RxInfer.jl's core concepts and applications by 
              <a href="https://www.youtube.com/@doggodotjl/search?query=RxInfer">@doggotodjl</a>.</span>
          </li>
          <li style="margin-bottom: 0.8em;">
              <strong>Victor Flores blogpost</strong><br/>
              <span style="color: var(--text-muted-color, #666);">A collection of projects and examples with RxInfer (but not limited to) at 
              <a href="https://vflores-io.github.io/">vflores-io</a>.</span>
          </li>
      </ul>
  </div>
  ```
  """
        )

        # Process categories in specified order
        all_categories = collect(keys(categories))

        # First, write ordered categories
        for cat in ORDERED_CATEGORIES
            if cat.path in all_categories
                write(io, style_category_header(cat.title))

                # Add category description
                write(
                    io,
                    """
          ```@raw html
          <div style="margin: -0.5em 0 2em 0; color: var(--description-text-color, #476582);">
              $(cat.description)
          </div>
          ```
          """
                )

                for meta in categories[cat.path]
                    write(io, style_example_card(meta))
                end
                delete!(categories, cat.path)
            end
        end

        # Then write any remaining categories alphabetically
        for folder in sort(collect(keys(categories)))
            write(io, style_category_header(folder))

            # Add a generic description for unknown categories
            write(
                io,
                """
      ```@raw html
      <div style="margin: -0.5em 0 2em 0; color: #476582;">
          Additional examples demonstrating various aspects of RxInfer.jl.
      </div>
      ```
      """
            )

            for meta in categories[folder]
                write(io, style_example_card(meta))
            end
        end

        write(io, ALL_EXAMPLES_CONTRIBUTING_NOTE)
    end
end

# Generate the examples list before building docs
generate_examples_list()

# Helper function to simplify page structure by removing redundant paths
function simplify_page_structure(pages)
    # Statistics counters
    total_items = 0
    simplified_items = 0
    categories = Set{String}()
    examples_per_category = Dict{String,Int}()
    simplified_paths = String[]

    function pretty_path(path)
        return titlecase(replace(path, "_" => " "))
    end

    function simplify_item(item)
        if !(item isa Pair)
            return item
        end

        category, content = item
        push!(categories, category)
        examples_per_category[category] = 0

        if content isa Vector
            # Process each example in the category
            simplified = map(content) do example
                total_items += 1
                examples_per_category[category] += 1
                if example isa Pair && example.second isa Vector
                    # We found a nested structure, get the file path
                    file_path = example.second[1].second
                    # Keep the example name but link directly to file
                    simplified_items += 1
                    push!(simplified_paths, "$(category)/$(example.first)")
                    pretty_path(example.first) => file_path
                else
                    example
                end
            end
            return pretty_path(category) => simplified
        end

        return item
    end

    simplified = map(simplify_item, pages)

    @info """
    Page Structure Simplification Stats:
    • Categories found: $(length(categories))
      $(join(sort(collect(categories)), "\n  "))
    • Total examples: $total_items
    • Simplified paths: $simplified_items

    Examples per category:
    $(join(["  $(cat): $(examples_per_category[cat])" for cat in sort(collect(categories))], "\n"))

    Simplified examples:
    $(join(sort(simplified_paths), "\n  "))
    """

    return simplified
end

# Function to generate pages structure from examples directory
function generate_pages()
    examples_dir = joinpath(@__DIR__, "src", "categories")
    !isdir(examples_dir) && return ["Main page" => "index.md"]

    # Base pages with main index and list of examples
    pages = Any[
        "Home"=>"index.md",
        "How to contribute"=>"how_to_contribute.md",
        "List of Examples"=>"autogenerated/list_of_examples.md",
    ]

    # Helper function to create nested page structure
    function process_directory(dir, prefix="")
        items = []

        # Process all markdown files in the current directory
        for entry in readdir(dir)
            path = joinpath(dir, entry)

            if isfile(path) && endswith(entry, ".md")
                # Get relative path from src directory
                rel_path = relpath(path, joinpath(@__DIR__, "src"))
                # Remove .md extension for the page title
                title = replace(basename(entry), r"\.md$" => "")
                push!(items, title => rel_path)
            elseif isdir(path) && !startswith(entry, "_")
                # Process subdirectory (skip directories starting with _)
                subdir_items = process_directory(path, joinpath(prefix, entry))
                if !isempty(subdir_items)
                    push!(items, entry => subdir_items)
                end
            end
        end

        return sort(items)  # Sort items within each category
    end

    # Add all example pages
    example_pages = process_directory(examples_dir)
    # Sort categories according to ORDERED_CATEGORIES
    example_pages = sort_by_ORDERED_CATEGORIES(example_pages)
    # Simplify page structure
    example_pages = simplify_page_structure(example_pages)
    append!(pages, example_pages)

    push!(pages, "How we build the examples" => "how_build_works.md")

    return pages
end

makedocs(
    clean=true,
    sitename="RxInfer.jl Examples",
    pages=generate_pages(),
    format=Documenter.HTML(
        prettyurls=get(ENV, "CI", nothing) == "true",
        canonical="https://examples.rxinfer.ml",
        assets=[
            "assets/theme.css",
            "assets/header.css",
            "assets/header.js",
            "assets/chat.js",
            "assets/favicon.ico"
        ],
        analytics="G-GMFX620VEP",
        example_size_threshold=200 * 1024,
        size_threshold_warn=200 * 1024,
        inventory_version="1.0.0",
        description = "A repository of examples and tutorials for RxInfer.jl, a Julia package for reactive message passing inference in probabilistic models.",
        footer = "Created in [BIASlab](https://biaslab.github.io/), maintained by [ReactiveBayes](https://github.com/ReactiveBayes), powered by [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl) and the [Julia Programming Language](https://julialang.org/)."
    )
)

# Function to find corresponding meta.jl for an HTML file
function find_meta_file(html_path, examples_dir)
    dir_path = dirname(html_path)
    base_name = basename(html_path)

    # Try direct meta.jl in the same directory
    meta_path = joinpath(dir_path, "meta.jl")
    if isfile(meta_path)
        return meta_path
    end

    # If it's index.html, check parent directory name
    if base_name == "index.html"
        parent_dir = basename(dir_path)
        grandparent_dir = dirname(dir_path)

        # Try meta.jl in parent directory
        meta_path = joinpath(grandparent_dir, "meta.jl")
        if isfile(meta_path)
            return meta_path
        end

        # If parent directory name matches its containing directory
        if basename(grandparent_dir) == parent_dir
            # Try one level up
            meta_path = joinpath(dirname(grandparent_dir), "meta.jl")
            if isfile(meta_path)
                return meta_path
            end
        end
    end

    return nothing
end

function inject_meta_tags()
    build_dir = joinpath(@__DIR__, "build")
    examples_dir = joinpath(build_dir, "categories")
    !isdir(build_dir) && return

    @info "Starting meta tags injection process"
    @info "Looking for HTML files in: $build_dir"
    @info "Ignoring directories: $(join(IGNORED_DIRECTORIES, ", "))"

    processed_count = 0
    success_count = 0

    # Sitemap URL
    sitemap_url = "https://examples.rxinfer.ml/sitemap.xml"

    # Process root index.html first
    root_index = joinpath(build_dir, "index.html")
    if isfile(root_index)
        @info "Processing root index.html"
        processed_count += 1

        content = read(root_index, String)
        meta_tags = String[]

        # Add default meta tags for root
        push!(meta_tags, """<meta property="og:title" content="RxInfer.jl Examples">""")
        push!(meta_tags, """<meta name="description" content="Collection of examples and tutorials for RxInfer.jl - a Julia package for message passing inference in probabilistic models">""")
        push!(meta_tags, """<meta property="og:description" content="Collection of examples and tutorials for RxInfer.jl - a Julia package for message passing inference in probabilistic models">""")
        push!(meta_tags, """<meta name="keywords" content="$(join(DEFAULT_META_TAGS, ", "))">""")
        push!(meta_tags, """<link rel="sitemap" type="application/xml" title="Sitemap" href="$(sitemap_url)">""")

        meta_html = join(meta_tags, "\n    ")
        new_content = replace(content, "</head>" => "\n    $(meta_html)\n    </head>"; count=1)

        if new_content != content
            write(root_index, new_content)
            success_count += 1
            @info "Successfully injected meta tags into root index.html"
        else
            @warn "Could not find </head> tag in root index.html"
        end
    end

    # Process examples directory
    for (root, dirs, files) in walkdir(examples_dir)
        # Filter out ignored directories
        filter!(d -> !(d in IGNORED_DIRECTORIES), dirs)

        @info "Scanning directory: $(relpath(root, examples_dir))" num_files = length(files) subdirs = dirs

        for file in files
            if endswith(file, ".html")
                # Skip if current directory is in ignored list
                if any(ignored -> occursin(ignored, relpath(root, examples_dir)), IGNORED_DIRECTORIES)
                    @info "Skipping file in ignored directory: $(relpath(filepath, examples_dir))"
                    continue
                end

                processed_count += 1
                filepath = joinpath(root, file)
                @info "Processing HTML file: $(relpath(filepath, examples_dir))"

                # Find corresponding meta.jl
                meta_path = find_meta_file(filepath, examples_dir)

                if meta_path === nothing
                    @info "No meta.jl found for $(file)"
                    continue
                end

                @info "Found meta.jl: $(relpath(meta_path, examples_dir))"

                # Load metadata if exists
                meta = try
                    include(meta_path)
                catch e
                    @warn "Failed to load metadata from $meta_path" exception = e
                    nothing
                end

                if meta === nothing
                    @warn "Failed to process metadata for $(file)"
                    continue
                end

                @info "Loaded metadata for $(file)" title = meta.title tags = join(meta.tags, ", ")

                # Read HTML content
                content = read(filepath, String)

                # Prepare meta tags
                meta_tags = String[]

                # Add title meta if available
                if meta.title !== nothing
                    push!(meta_tags, """<meta property="og:title" content="$(meta.title) - RxInfer Examples">""")
                end

                # Add description meta if available
                if meta.description !== nothing
                    push!(meta_tags, """<meta name="description" content="$(meta.description)">""")
                    push!(meta_tags, """<meta property="og:description" content="$(meta.description)">""")
                end

                # Add keywords meta if available
                if !isempty(meta.tags)
                    all_tags = unique([DEFAULT_META_TAGS; meta.tags])
                    push!(meta_tags, """<meta name="keywords" content="$(join(all_tags, ", "))">""")
                end

                # Add sitemap link to meta tags
                push!(meta_tags, """<link rel="sitemap" type="application/xml" title="Sitemap" href="$(sitemap_url)">""")

                # Only proceed if we have meta tags to inject
                if !isempty(meta_tags)
                    meta_html = join(meta_tags, "\n    ")

                    # Replace </head> with meta tags + </head>
                    new_content = replace(content, "</head>" => "\n    $(meta_html)\n    </head>"; count=1)

                    if new_content != content
                        # Write back to file
                        write(filepath, new_content)
                        success_count += 1
                        @info "Successfully injected meta tags into $(relpath(filepath, examples_dir))"
                    else
                        @warn "Could not find </head> tag in $(file)"
                    end
                end
            end
        end
    end

    @info """
    Meta tags injection completed:
    • Total HTML files processed: $processed_count
    • Successfully updated files: $success_count
    • Failed/Skipped files: $(processed_count - success_count)
    """
end

# Function to generate sitemap.xml
function generate_sitemap()
    build_dir = joinpath(@__DIR__, "build")
    base_url = "https://examples.rxinfer.ml"

    @info "Starting sitemap generation"

    # Collect all HTML files
    html_files = String[]
    for (root, _, files) in walkdir(build_dir)
        # Skip ignored directories
        if any(ignored -> occursin(ignored, relpath(root, build_dir)), IGNORED_DIRECTORIES)
            continue
        end

        for file in files
            if endswith(file, ".html")
                push!(html_files, relpath(joinpath(root, file), build_dir))
            end
        end
    end

    # Generate sitemap content
    sitemap_content = """
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    """

    for file in sort(html_files)
        # Convert file path to URL, removing .html extension
        url_path = replace(file, r"index\.html$" => "")  # Remove index.html completely
        url_path = replace(url_path, r"\.html$" => "")   # Remove .html from other files
        url_path = strip(url_path, '/')                  # Remove trailing slash

        # Construct full URL
        full_url = if isempty(url_path)
            base_url
        else
            joinpath(base_url, url_path)
        end

        # Get last modification date
        lastmod = Dates.format(Dates.now(), "yyyy-mm-ddTHH:MM:SSz")

        priority = 1.0
        frequency = "weekly"

        sitemap_content *= """
            <url>
                <loc>$(full_url)</loc>
                <lastmod>$(lastmod)</lastmod>
                <changefreq>$(frequency)</changefreq>
                <priority>$(priority)</priority>
            </url>
        """
    end

    sitemap_content *= "\n</urlset>"

    # Write sitemap
    sitemap_path = joinpath(build_dir, "sitemap.xml")
    write(sitemap_path, sitemap_content)

    @info """
    Sitemap generation completed:
    • Total URLs: $(length(html_files))
    • Output: $(sitemap_path)
    """
end

# Call inject_meta_tags after makedocs
inject_meta_tags()
generate_sitemap()

# Print resulting file structure
function print_dir_structure(dir, prefix="")
    # Get all markdown files in current directory
    html_files = filter(f -> endswith(f, ".html"), readdir(dir))
    subdirs = sort(filter(d -> isdir(joinpath(dir, d)) && !startswith(d, "_"), readdir(dir)))

    # Print current directory if it has markdown files
    @info "$(prefix)📁 $(basename(dir))/"
    if !isempty(html_files)
        for file in sort(html_files)
            @info "$(prefix)  📄 $file"
        end
    end

    # Always process subdirectories if they exist
    for subdir in subdirs
        print_dir_structure(joinpath(dir, subdir), prefix * "  ")
    end
end

@info """
Generated website structure:
"""
print_dir_structure(joinpath(@__DIR__, "build"))

if get(ENV, "CI", nothing) == "true"
    deploydocs(
        repo="github.com/ReactiveBayes/RxInferExamples.jl.git",
        devbranch="main",
        forcepush=true,
        versions=nothing,
        cname="examples.rxinfer.ml"
    )
end